
//
//  Virtual Machine
//


#ifndef VM_H
#define VM_H

#include "lexer.h"
#include "bytecode.h"


// The maximum number of functions a program can define.
#define MAX_FUNCTIONS 1024


// A function generated by the compiler.
typedef struct {
	// A pointer to the start of the function's name in the
	// source code.
	//
	// If this is the main function (outside any function
	// definition), then this is NULL.
	char *name;

	// The length of the function's name in the source code.
	// Excludes the NULL terminator.
	int name_length;

	// The function's compiled bytecode.
	Bytecode bytecode;

	// The number of arguments passed to the function.
	// All functions return 1 argument (nil if it isn't
	// explicitly stated in the code), so there's no value
	// here indicating if the function returns something.
	int argument_count;
} Function;


// The virtual machine.
//
// The VM is responsible for compiling the code initially, and then
// executing the compiled bytecode.
typedef struct {
	// A pointer to the start of the source code.
	char *source;

	// A lexer, producing a stream of tokens from the source code.
	Lexer lexer;

	// A list of functions defined during compilation.
	//
	// The main function (for all code outside of an actual function
	// definition) will be the first function in this list.
	Function functions[MAX_FUNCTIONS];

	// The number of functions that we've compiled.
	int function_count;
} VirtualMachine;


// Create a new virtual machine with the given source code.
// Initialises the VM with default values, and doesn't compile
// anything.
VirtualMachine vm_new(char *source);

// Free any resources allocated by the VM.
void vm_free(VirtualMachine *vm);

// Compiles the source code into bytecode.
void vm_compile(VirtualMachine *vm);

// Runs the compiled bytecode.
void vm_run(VirtualMachine *vm);


// Defines a new function on the virtual machine, returning
// a pointer to it.
Function * vm_define_bytecode_function(
	VirtualMachine *vm,
	char *name,
	int name_length,
	int argument_count);

// Returns the index of a function with the given name and
// name length.
// Returns -1 if the function isn't found.
int vm_index_of_function(VirtualMachine *vm, char *name, int length);

#endif
